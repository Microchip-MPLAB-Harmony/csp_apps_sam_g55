{"0": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products. (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \"Third Party\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "ADC user sequence",
    "title": "ADC user sequence",
    "content": "This example demonstrates how to sample three analog inputs using the user sequencer in software trigger mode and send the converted data to the console. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_user_sequence/readme.html#adc-user-sequence",
    "relUrl": "/apps/adc/adc_user_sequence/readme.html#adc-user-sequence"
  },"2": {
    "doc": "ADC user sequence",
    "title": "Description",
    "content": "Conversion of the three analog inputs is triggered from software trigger at every 500 ms. The user sequencer is used to define the order of conversion: . | Board | Sequence of conversion | . | SAM G55 Xplained Pro Evaluation Kit | AD2 –&gt; AD0 –&gt; AD1 | . |   |   | . Analog input voltage in the range of 0 V to 3.3 V is fed to the ADC input channel AD2, AD0 and AD1. ADC conversion result is displayed on the console. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_user_sequence/readme.html#description",
    "relUrl": "/apps/adc/adc_user_sequence/readme.html#description"
  },"3": {
    "doc": "ADC user sequence",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/adc/adc_user_sequence/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_user_sequence/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/adc/adc_user_sequence/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "ADC user sequence",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Use a jumper wire to connect Pin 3 of EXT1 (AD0 is mapped to Port Pin PA17) to 3.3 V or GND | Use a jumper wire to connect Pin 4 of EXT1 (AD1 is mapped to Port Pin PA18) to 3.3 V or GND | Use a jumper wire to connect Pin 3 of EXT3 (AD2 is mapped to Port Pin PA19) to 3.3 V or GND | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_user_sequence/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/adc/adc_user_sequence/readme.html#setting-up-the-hardware"
  },"5": {
    "doc": "ADC user sequence",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Console displays the ADC Count and the ADC Input Voltage | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_user_sequence/readme.html#running-the-application",
    "relUrl": "/apps/adc/adc_user_sequence/readme.html#running-the-application"
  },"6": {
    "doc": "ADC user sequence",
    "title": "ADC user sequence",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_user_sequence/readme.html",
    "relUrl": "/apps/adc/adc_user_sequence/readme.html"
  },"7": {
    "doc": "Clock configuration",
    "title": "Clock configuration",
    "content": "This example application shows how to configure the clock system to run the device at maximum frequency. It also outputs a prescaled clock signal on a GPIO pin for measurement and verification. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/clock/clock_config/readme.html#clock-configuration",
    "relUrl": "/apps/clock/clock_config/readme.html#clock-configuration"
  },"8": {
    "doc": "Clock configuration",
    "title": "Description",
    "content": "Clock system generates and distributes the clock for the processor and peripherals. This example application shows how to use the clock manager to configure the device to run at the max possible speed. A prescaled clock signal is routed to GPIO pin to measure the frequency and accuracy of the internal device clock. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/clock/clock_config/readme.html#description",
    "relUrl": "/apps/clock/clock_config/readme.html#description"
  },"9": {
    "doc": "Clock configuration",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/clock/clock_config/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/clock/clock_config/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/clock/clock_config/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "Clock configuration",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect an oscilloscope to monitor the PORT pin PA17 (EXT1 header) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/clock/clock_config/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/clock/clock_config/readme.html#setting-up-the-hardware"
  },"11": {
    "doc": "Clock configuration",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe a clock of 2 MHz on the clock output pin | LED should be blinking continuosly | . Refer to the following table for clock output pin and LED name for different boards: . | Board | Clock output pin | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | PA17 (Pin #3 on the EXT1 header) | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/clock/clock_config/readme.html#running-the-application",
    "relUrl": "/apps/clock/clock_config/readme.html#running-the-application"
  },"12": {
    "doc": "Clock configuration",
    "title": "Clock configuration",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/clock/clock_config/readme.html",
    "relUrl": "/apps/clock/clock_config/readme.html"
  },"13": {
    "doc": "CRCCU Compute CRC32",
    "title": "CRCCU Compute CRC32",
    "content": "This example demonstrates how to use the CRCCU module to calculate 32 bit CRC value of a data block. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/crccu/crccu_crc32_generate/readme.html#crccu-compute-crc32",
    "relUrl": "/apps/crccu/crccu_crc32_generate/readme.html#crccu-compute-crc32"
  },"14": {
    "doc": "CRCCU Compute CRC32",
    "title": "Description",
    "content": "This application uses CRCCU to compute the CRC value of a predefined data block. Once the computation is done, it compares the output with precomputed CRC value for the same data block. If the comparison is successful, application will light up an LED. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/crccu/crccu_crc32_generate/readme.html#description",
    "relUrl": "/apps/crccu/crccu_crc32_generate/readme.html#description"
  },"15": {
    "doc": "CRCCU Compute CRC32",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/crccu/crccu_crc32_generate/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/crccu/crccu_crc32_generate/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/crccu/crccu_crc32_generate/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "CRCCU Compute CRC32",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/crccu/crccu_crc32_generate/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/crccu/crccu_crc32_generate/readme.html#setting-up-the-hardware"
  },"17": {
    "doc": "CRCCU Compute CRC32",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE | The LED indicates the success or failure: . | The LED is turned ON when the hardware CRC value matched with the software calculated CRC value | The LED is turned OFF when the hardware CRC value did not match with the software calculated CRC value | . | . The following table provides the LED name: . | Board | LED | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/crccu/crccu_crc32_generate/readme.html#running-the-application",
    "relUrl": "/apps/crccu/crccu_crc32_generate/readme.html#running-the-application"
  },"18": {
    "doc": "CRCCU Compute CRC32",
    "title": "CRCCU Compute CRC32",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/crccu/crccu_crc32_generate/readme.html",
    "relUrl": "/apps/crccu/crccu_crc32_generate/readme.html"
  },"19": {
    "doc": "EFC read write",
    "title": "EFC read write",
    "content": "This example shows how to use EFC to erase and program the internal Flash memory. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/efc/flash_read_write/readme.html#efc-read-write",
    "relUrl": "/apps/efc/flash_read_write/readme.html#efc-read-write"
  },"20": {
    "doc": "EFC read write",
    "title": "Description",
    "content": "This example uses the EFC peripheral library to erase a row and write an array of values to the internal Flash memory. It verifies the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/efc/flash_read_write/readme.html#description",
    "relUrl": "/apps/efc/flash_read_write/readme.html#description"
  },"21": {
    "doc": "EFC read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/efc/flash_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/efc/flash_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/efc/flash_read_write/readme.html#downloading-and-building-the-application"
  },"22": {
    "doc": "EFC read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/efc/flash_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/efc/flash_read_write/readme.html#setting-up-the-hardware"
  },"23": {
    "doc": "EFC read write",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the flash matched with the written value | The LED is turned OFF when the value read from the flash did not match with the written value | . | . | Board | LED name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/efc/flash_read_write/readme.html#running-the-application",
    "relUrl": "/apps/efc/flash_read_write/readme.html#running-the-application"
  },"24": {
    "doc": "EFC read write",
    "title": "EFC read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/efc/flash_read_write/readme.html",
    "relUrl": "/apps/efc/flash_read_write/readme.html"
  },"25": {
    "doc": "FLEXCOM SPI EEPROM read write",
    "title": "FLEXCOM SPI EEPROM read write",
    "content": "This example application shows how to use the flexcom module in SPI mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_eeprom/readme.html#flexcom-spi-eeprom-read-write",
    "relUrl": "/apps/flexcom/flexcom_spi_eeprom/readme.html#flexcom-spi-eeprom-read-write"
  },"26": {
    "doc": "FLEXCOM SPI EEPROM read write",
    "title": "Description",
    "content": "This application configures the flexcom peripheral in SPI mode to read and write data from an external EEPROM memory chip. Data is written to the EEPROM and then read back and compared. Successful comparison is indicated by turning on an LED. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_eeprom/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_spi_eeprom/readme.html#description"
  },"27": {
    "doc": "FLEXCOM SPI EEPROM read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_spi_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_eeprom/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "FLEXCOM SPI EEPROM read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect mikroBUS Xplained Pro board to the EXT1 connector | Plug an EEPROM 4 Click board into the MikroBus socket of the mikroBUS Xplained Pro board | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_spi_eeprom/readme.html#setting-up-the-hardware"
  },"29": {
    "doc": "FLEXCOM SPI EEPROM read write",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_eeprom/readme.html#running-the-application"
  },"30": {
    "doc": "FLEXCOM SPI EEPROM read write",
    "title": "FLEXCOM SPI EEPROM read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_eeprom/readme.html",
    "relUrl": "/apps/flexcom/flexcom_spi_eeprom/readme.html"
  },"31": {
    "doc": "FLEXCOM SPI blocking",
    "title": "FLEXCOM SPI blocking",
    "content": "This example application demonstrates how to use the FLEXCOM SPI peripheral to transmit and receive a block of data in a blocking manner. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#flexcom-spi-blocking",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#flexcom-spi-blocking"
  },"32": {
    "doc": "FLEXCOM SPI blocking",
    "title": "Description",
    "content": "This example shows the transmit and receive operation over a SPI interface in a blocking manner. The CPU polls the peripheral register continuously to manage the transfer. It transmits an array of values and verifies the value transmitted by receiving the values back with loop back and comparing it to the value transmitted. The loop back test requires the MOSI output pin to be connected to the MISO input pin so that anything transmitted will also be received. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#description"
  },"33": {
    "doc": "FLEXCOM SPI blocking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_spi_self_loopback_blocking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "FLEXCOM SPI blocking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Use a jumper wire to short pin 16 and pin 17 of the EXT1 header | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#setting-up-the-hardware"
  },"35": {
    "doc": "FLEXCOM SPI blocking",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | SPI data transfer and compare match checking happens only one time | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html#running-the-application"
  },"36": {
    "doc": "FLEXCOM SPI blocking",
    "title": "FLEXCOM SPI blocking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html"
  },"37": {
    "doc": "FLEXCOM SPI with DMA",
    "title": "FLEXCOM SPI with DMA",
    "content": "This example application shows how to use FLEXCOM SPI PLIB with external loop back to write and then read back an array of data in DMA mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#flexcom-spi-with-dma",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#flexcom-spi-with-dma"
  },"38": {
    "doc": "FLEXCOM SPI with DMA",
    "title": "Description",
    "content": "This example shows the transmit and receive operation over SPI interface using DMA in a non-blocking manner. It transmits an array of values and verifies the value transmitted by receiving the values back with look back and comparing it to the value transmitted. The loop back test requires the MOSI output pin to be connected to the MISO input pin so that anything transmitted will also be received. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#description"
  },"39": {
    "doc": "FLEXCOM SPI with DMA",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_spi_self_loopback_dma/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#downloading-and-building-the-application"
  },"40": {
    "doc": "FLEXCOM SPI with DMA",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Use a jumper wire to short pin 16 and pin 17 of the EXT1 header | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#setting-up-the-hardware"
  },"41": {
    "doc": "FLEXCOM SPI with DMA",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | SPI data transfer and compare match checking happens only one time | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html#running-the-application"
  },"42": {
    "doc": "FLEXCOM SPI with DMA",
    "title": "FLEXCOM SPI with DMA",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html"
  },"43": {
    "doc": "FLEXCOM SPI interrupt",
    "title": "FLEXCOM SPI interrupt",
    "content": "This example application shows how to use FLEXCOM SPI PLIB with external loop back to write and then read back an array of data in interrupt mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#flexcom-spi-interrupt",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#flexcom-spi-interrupt"
  },"44": {
    "doc": "FLEXCOM SPI interrupt",
    "title": "Description",
    "content": "This example shows the transmit and receive operation over a SPI interface in a non-blocking manner. The peripheral interrupt is used to manage the transfer. It transmits an array of values and verifies the value transmitted by receiving the values back with look back and comparing it to the value transmitted. The loop back test requires the MOSI output pin to be connected to the MISO input pin so that anything transmitted will also be received. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#description"
  },"45": {
    "doc": "FLEXCOM SPI interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_spi_self_loopback_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "FLEXCOM SPI interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Use a jumper wire to short pin 16 and pin 17 of the EXT1 header | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#setting-up-the-hardware"
  },"47": {
    "doc": "FLEXCOM SPI interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | SPI data transfer and compare match checking happens only one time | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html#running-the-application"
  },"48": {
    "doc": "FLEXCOM SPI interrupt",
    "title": "FLEXCOM SPI interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html",
    "relUrl": "/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html"
  },"49": {
    "doc": "FLEXCOM TWI (I2C) EEPROM",
    "title": "FLEXCOM TWI (I2C) EEPROM",
    "content": "This example application shows how to use the flexcom module in TWI mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_twi_eeprom/readme.html#flexcom-twi-i2c-eeprom",
    "relUrl": "/apps/flexcom/flexcom_twi_eeprom/readme.html#flexcom-twi-i2c-eeprom"
  },"50": {
    "doc": "FLEXCOM TWI (I2C) EEPROM",
    "title": "Description",
    "content": "This application configures the flexcom peripheral in TWI mode to read and write data from an external EEPROM memory chip. Data is written to the EEPROM and then read back and compared. Successful comparison is indicated by turning on an LED. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_twi_eeprom/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_twi_eeprom/readme.html#description"
  },"51": {
    "doc": "FLEXCOM TWI (I2C) EEPROM",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_twi_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_twi_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_twi_eeprom/readme.html#downloading-and-building-the-application"
  },"52": {
    "doc": "FLEXCOM TWI (I2C) EEPROM",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect mikroBUS Xplained Pro board to EXT1 header | Plug the EEPROM 3 click Board into the MikroBus socket of the mikroBUS Xplained Pro board | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_twi_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_twi_eeprom/readme.html#setting-up-the-hardware"
  },"53": {
    "doc": "FLEXCOM TWI (I2C) EEPROM",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_twi_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_twi_eeprom/readme.html#running-the-application"
  },"54": {
    "doc": "FLEXCOM TWI (I2C) EEPROM",
    "title": "FLEXCOM TWI (I2C) EEPROM",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_twi_eeprom/readme.html",
    "relUrl": "/apps/flexcom/flexcom_twi_eeprom/readme.html"
  },"55": {
    "doc": "FLEXCOM USART blocking",
    "title": "FLEXCOM USART blocking",
    "content": "This example application shows how to use the flexcom module in USART mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_blocking/readme.html#flexcom-usart-blocking",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_blocking/readme.html#flexcom-usart-blocking"
  },"56": {
    "doc": "FLEXCOM USART blocking",
    "title": "Description",
    "content": "This application configures the flexcom peripheral in USART mode and performs read and write operation in a blocking manner. The CPU polls the peripheral register continuously to manage the transfer. It receives a line of characters from the terminal window and echoes them back. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_blocking/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_blocking/readme.html#description"
  },"57": {
    "doc": "FLEXCOM USART blocking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_usart_echo_blocking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_blocking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_blocking/readme.html#downloading-and-building-the-application"
  },"58": {
    "doc": "FLEXCOM USART blocking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_blocking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_blocking/readme.html#setting-up-the-hardware"
  },"59": {
    "doc": "FLEXCOM USART blocking",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type a line of characters and press the Enter key (NOTE: Number of characters entered before pressing enter key must be less than 256)) | Entered line will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_blocking/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_blocking/readme.html#running-the-application"
  },"60": {
    "doc": "FLEXCOM USART blocking",
    "title": "FLEXCOM USART blocking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_blocking/readme.html",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_blocking/readme.html"
  },"61": {
    "doc": "FLEXCOM USART with DMA",
    "title": "FLEXCOM USART with DMA",
    "content": "This example application shows how to use the flexcom module in USART DMA mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_dma/readme.html#flexcom-usart-with-dma",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_dma/readme.html#flexcom-usart-with-dma"
  },"62": {
    "doc": "FLEXCOM USART with DMA",
    "title": "Description",
    "content": "This application configures the flexcom peripheral in USART DMA mode and performs read and write operation in a non-blocking manner. It receives 10 characters from the terminal window and echoes them back. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_dma/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_dma/readme.html#description"
  },"63": {
    "doc": "FLEXCOM USART with DMA",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_usart_echo_dma/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_dma/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_dma/readme.html#downloading-and-building-the-application"
  },"64": {
    "doc": "FLEXCOM USART with DMA",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_dma/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_dma/readme.html#setting-up-the-hardware"
  },"65": {
    "doc": "FLEXCOM USART with DMA",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type 10 characters in the console | Entered characters will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_dma/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_dma/readme.html#running-the-application"
  },"66": {
    "doc": "FLEXCOM USART with DMA",
    "title": "FLEXCOM USART with DMA",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_dma/readme.html",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_dma/readme.html"
  },"67": {
    "doc": "FLEXCOM USART interrupt",
    "title": "FLEXCOM USART interrupt",
    "content": "This example application shows how to use the flexcom module in USART mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#flexcom-usart-interrupt",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#flexcom-usart-interrupt"
  },"68": {
    "doc": "FLEXCOM USART interrupt",
    "title": "Description",
    "content": "This application configures the flexcom peripheral in USART mode and performs read and write operation in a non-blocking manner. The peripheral interrupt is used to manage the transfer. It receives 10 characters from the terminal window and echoes them back. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#description"
  },"69": {
    "doc": "FLEXCOM USART interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_usart_echo_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#downloading-and-building-the-application"
  },"70": {
    "doc": "FLEXCOM USART interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the debugger probe to J33 connector | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#setting-up-the-hardware"
  },"71": {
    "doc": "FLEXCOM USART interrupt",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type 10 characters in the console | Entered characters will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_interrupt/readme.html#running-the-application"
  },"72": {
    "doc": "FLEXCOM USART interrupt",
    "title": "FLEXCOM USART interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_interrupt/readme.html",
    "relUrl": "/apps/flexcom/flexcom_usart_echo_interrupt/readme.html"
  },"73": {
    "doc": "FLEXCOM USART ring buffer",
    "title": "FLEXCOM USART ring buffer",
    "content": "This example application demonstrates how to use the FLEXCOM peripheral in USART ring buffer mode. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#flexcom-usart-ring-buffer",
    "relUrl": "/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#flexcom-usart-ring-buffer"
  },"74": {
    "doc": "FLEXCOM USART ring buffer",
    "title": "Description",
    "content": "This example demonstrates read and write over USART using the ring buffer mode. The USART is configured in non-blocking mode (interrupts enabled). The example asks the user to enter 10 characters. Once received, the characters are echoed back. In the process, the example demonstrates various ring buffer APIs. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#description",
    "relUrl": "/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#description"
  },"75": {
    "doc": "FLEXCOM USART ring buffer",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/flexcom/flexcom_usart_ring_buffer_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#downloading-and-building-the-application"
  },"76": {
    "doc": "FLEXCOM USART ring buffer",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#setting-up-the-hardware"
  },"77": {
    "doc": "FLEXCOM USART ring buffer",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Console displays the initial transmit and receive buffer sizes | It then adds 10 characters - “0123456789” to the transmit buffer and displays the available free space in the transmit buffer after the 10 characters have been added | The message asks the user to enter 10 characters | NOTE: For this example, the “Free Space in Transmit Buffer = xx”, where xx can be anything between 117 to 127, depending on the USART baud rate and the CPU execution speed | . | Enter 10 characters on the terminal | Entered characters are echoed back on the console and message is displayed indicating that the receive notification is turned on . | For every 10 characters typed, it will be echoed back on the console . | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html#running-the-application"
  },"78": {
    "doc": "FLEXCOM USART ring buffer",
    "title": "FLEXCOM USART ring buffer",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html",
    "relUrl": "/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html"
  },"79": {
    "doc": "MEM2MEM memory transfer",
    "title": "MEM2MEM memory transfer",
    "content": "This application demonstrates data transfer between two memory location using MEM2MEM. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/mem2mem/mem2mem_memory_transfer/readme.html#mem2mem-memory-transfer",
    "relUrl": "/apps/mem2mem/mem2mem_memory_transfer/readme.html#mem2mem-memory-transfer"
  },"80": {
    "doc": "MEM2MEM memory transfer",
    "title": "Description",
    "content": "Data from the source location is transferred to the destination using MEM2MEM. Souce and destination data is compared and match is indicated by turning on the LED. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/mem2mem/mem2mem_memory_transfer/readme.html#description",
    "relUrl": "/apps/mem2mem/mem2mem_memory_transfer/readme.html#description"
  },"81": {
    "doc": "MEM2MEM memory transfer",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/mem2mem/mem2mem_memory_transfer/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/mem2mem/mem2mem_memory_transfer/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/mem2mem/mem2mem_memory_transfer/readme.html#downloading-and-building-the-application"
  },"82": {
    "doc": "MEM2MEM memory transfer",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/mem2mem/mem2mem_memory_transfer/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/mem2mem/mem2mem_memory_transfer/readme.html#setting-up-the-hardware"
  },"83": {
    "doc": "MEM2MEM memory transfer",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | LED indicates the success or failure: . | LED is turned ON when the memory transfer is successful. | Following table provides the LED name | . | Board Name | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . | Observe output message in console as follows: . | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/mem2mem/mem2mem_memory_transfer/readme.html#running-the-application",
    "relUrl": "/apps/mem2mem/mem2mem_memory_transfer/readme.html#running-the-application"
  },"84": {
    "doc": "MEM2MEM memory transfer",
    "title": "MEM2MEM memory transfer",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/mem2mem/mem2mem_memory_transfer/readme.html",
    "relUrl": "/apps/mem2mem/mem2mem_memory_transfer/readme.html"
  },"85": {
    "doc": "PIO interrupt",
    "title": "PIO interrupt",
    "content": "This example shows how to generate GPIO interrupt on switch press and release, and indicate the switch status using the LED. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_interrupt/readme.html#pio-interrupt",
    "relUrl": "/apps/pio/pio_led_on_off_interrupt/readme.html#pio-interrupt"
  },"86": {
    "doc": "PIO interrupt",
    "title": "Description",
    "content": "This application uses the PIO Peripheral library to generate callback on switch press and release, and drives the GPIO pin connected to the LED to indicate the switch status. The LED is turned ON when the switch is pressed and turned OFF when the switch is released. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_interrupt/readme.html#description",
    "relUrl": "/apps/pio/pio_led_on_off_interrupt/readme.html#description"
  },"87": {
    "doc": "PIO interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/pio/pio_led_on_off_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/pio/pio_led_on_off_interrupt/readme.html#downloading-and-building-the-application"
  },"88": {
    "doc": "PIO interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/pio/pio_led_on_off_interrupt/readme.html#setting-up-the-hardware"
  },"89": {
    "doc": "PIO interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED is turned ON when the switch is pressed and turned OFF when the switch is released | . | Board | Switch Name | LED Name Name | . | SAM G55 Xplained Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/pio/pio_led_on_off_interrupt/readme.html#running-the-application"
  },"90": {
    "doc": "PIO interrupt",
    "title": "PIO interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_interrupt/readme.html",
    "relUrl": "/apps/pio/pio_led_on_off_interrupt/readme.html"
  },"91": {
    "doc": "PIO polling",
    "title": "PIO polling",
    "content": "This example shows how to poll the switch input, and indicate the switch status using the LED. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_polling/readme.html#pio-polling",
    "relUrl": "/apps/pio/pio_led_on_off_polling/readme.html#pio-polling"
  },"92": {
    "doc": "PIO polling",
    "title": "Description",
    "content": "This application uses the PIO Peripheral library to read GPIO pin connected to the switch, and drives the GPIO pin connected to the LED to indicate switch status. LED is turned ON when the switch is pressed and turned OFF when the switch is released. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_polling/readme.html#description",
    "relUrl": "/apps/pio/pio_led_on_off_polling/readme.html#description"
  },"93": {
    "doc": "PIO polling",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/pio/pio_led_on_off_polling/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_polling/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/pio/pio_led_on_off_polling/readme.html#downloading-and-building-the-application"
  },"94": {
    "doc": "PIO polling",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_polling/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/pio/pio_led_on_off_polling/readme.html#setting-up-the-hardware"
  },"95": {
    "doc": "PIO polling",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED is turned ON when the switch is pressed and turned OFF when the switch is released | . | Board | Switch Name | LED Name Name | . | SAM G55 Xplained Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_polling/readme.html#running-the-application",
    "relUrl": "/apps/pio/pio_led_on_off_polling/readme.html#running-the-application"
  },"96": {
    "doc": "PIO polling",
    "title": "PIO polling",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/pio/pio_led_on_off_polling/readme.html",
    "relUrl": "/apps/pio/pio_led_on_off_polling/readme.html"
  },"97": {
    "doc": "RSTC interrupt",
    "title": "RSTC interrupt",
    "content": "This example shows how to use the RSTC peripheral to generate an interrupt instead of generating a reset, when the Reset switch is pressed on board. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rstc/led_switcher/readme.html#rstc-interrupt",
    "relUrl": "/apps/rstc/led_switcher/readme.html#rstc-interrupt"
  },"98": {
    "doc": "RSTC interrupt",
    "title": "Description",
    "content": "The RSTC peripheral samples the Reset input (NRST pin) at slow clock speed. When the line is detected low, it resets the processor and the peripherals. However, the RSTC peripheral can be programmed to not trigger a reset when an assertion of NRST occurs. The Reset pin state can be read at any time in software or it can also be programmed to generate an interrupt instead of generating a reset. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rstc/led_switcher/readme.html#description",
    "relUrl": "/apps/rstc/led_switcher/readme.html#description"
  },"99": {
    "doc": "RSTC interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rstc/led_switcher/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rstc/led_switcher/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rstc/led_switcher/readme.html#downloading-and-building-the-application"
  },"100": {
    "doc": "RSTC interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rstc/led_switcher/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rstc/led_switcher/readme.html#setting-up-the-hardware"
  },"101": {
    "doc": "RSTC interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | Disconnect and reconnect the Debug USB port to power cycle the board | Press the “RESET” switch and observe the LED toggling | . The following table provides the LED name . | Board | LED Name Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rstc/led_switcher/readme.html#running-the-application",
    "relUrl": "/apps/rstc/led_switcher/readme.html#running-the-application"
  },"102": {
    "doc": "RSTC interrupt",
    "title": "RSTC interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rstc/led_switcher/readme.html",
    "relUrl": "/apps/rstc/led_switcher/readme.html"
  },"103": {
    "doc": "RTC alarm interrupt",
    "title": "RTC alarm interrupt",
    "content": "This example shows how to use the RTC to configure the time and generate the alarm. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtc/rtc_alarm/readme.html#rtc-alarm-interrupt",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#rtc-alarm-interrupt"
  },"104": {
    "doc": "RTC alarm interrupt",
    "title": "Description",
    "content": "This example application shows how to setup system time and configure alarm using the RTC Peripheral Library. The application sets up an alarm to be generated after 20 seconds of the configured system time. The application displays a message on the alarm trigger. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtc/rtc_alarm/readme.html#description",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#description"
  },"105": {
    "doc": "RTC alarm interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtc/rtc_alarm/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtc/rtc_alarm/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#downloading-and-building-the-application"
  },"106": {
    "doc": "RTC alarm interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtc/rtc_alarm/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#setting-up-the-hardware"
  },"107": {
    "doc": "RTC alarm interrupt",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | The console displays the current time and the alarm time (System time starts at 12:00:00 and gets updated every second) . | Once the alarm time is reached, it print the alarm message and turns on the LED (System time keeps updating) . | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtc/rtc_alarm/readme.html#running-the-application",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#running-the-application"
  },"108": {
    "doc": "RTC alarm interrupt",
    "title": "RTC alarm interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtc/rtc_alarm/readme.html",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html"
  },"109": {
    "doc": "RTT periodic interrupt",
    "title": "RTT periodic interrupt",
    "content": "This example shows how to use the RTT to generate periodic interrupts. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtt/rtt_periodic_timeout/readme.html#rtt-periodic-interrupt",
    "relUrl": "/apps/rtt/rtt_periodic_timeout/readme.html#rtt-periodic-interrupt"
  },"110": {
    "doc": "RTT periodic interrupt",
    "title": "Description",
    "content": "This example application shows how to configure the RTT Peripheral to generate periodic ticks. It toggles an LED every time the callback is triggered. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtt/rtt_periodic_timeout/readme.html#description",
    "relUrl": "/apps/rtt/rtt_periodic_timeout/readme.html#description"
  },"111": {
    "doc": "RTT periodic interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtt/rtt_periodic_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtt/rtt_periodic_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtt/rtt_periodic_timeout/readme.html#downloading-and-building-the-application"
  },"112": {
    "doc": "RTT periodic interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtt/rtt_periodic_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtt/rtt_periodic_timeout/readme.html#setting-up-the-hardware"
  },"113": {
    "doc": "RTT periodic interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its respective IDE | The LED blinks continuously | . The following table provides the LED name: . | Board | LED | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtt/rtt_periodic_timeout/readme.html#running-the-application",
    "relUrl": "/apps/rtt/rtt_periodic_timeout/readme.html#running-the-application"
  },"114": {
    "doc": "RTT periodic interrupt",
    "title": "RTT periodic interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/rtt/rtt_periodic_timeout/readme.html",
    "relUrl": "/apps/rtt/rtt_periodic_timeout/readme.html"
  },"115": {
    "doc": "SUPC wakeup using RTC",
    "title": "SUPC wakeup using RTC",
    "content": "This example shows how to enter different low power modes and exit it using the RTC alarm. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtc/readme.html#supc-wakeup-using-rtc",
    "relUrl": "/apps/supc/supc_wakeup_rtc/readme.html#supc-wakeup-using-rtc"
  },"116": {
    "doc": "SUPC wakeup using RTC",
    "title": "Description",
    "content": "This example demonstrates entering different low power modes, retention of the general purpose backup registers (GPBR) and backup SRAM on wakeup from backup mode through an RTC alarm. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtc/readme.html#description",
    "relUrl": "/apps/supc/supc_wakeup_rtc/readme.html#description"
  },"117": {
    "doc": "SUPC wakeup using RTC",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/supc/supc_wakeup_rtc/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtc/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/supc/supc_wakeup_rtc/readme.html#downloading-and-building-the-application"
  },"118": {
    "doc": "SUPC wakeup using RTC",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtc/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/supc/supc_wakeup_rtc/readme.html#setting-up-the-hardware"
  },"119": {
    "doc": "SUPC wakeup using RTC",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | On board LED starts blinking | See the following message in the console . | Select the option to enter the required Low power mode (LED is turned off when device enters a low power mode) | When the device wakes up on RTC alarm, the LED starts blinking and the console displays the following message based on the entered low power mode . | Waking up from sleep Mode . | Waking up from wait Mode . | Waking up from backup Mode . | . | . Following table lists the name of LED used on the target board: . | Board | LED | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtc/readme.html#running-the-application",
    "relUrl": "/apps/supc/supc_wakeup_rtc/readme.html#running-the-application"
  },"120": {
    "doc": "SUPC wakeup using RTC",
    "title": "SUPC wakeup using RTC",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtc/readme.html",
    "relUrl": "/apps/supc/supc_wakeup_rtc/readme.html"
  },"121": {
    "doc": "SUPC wakeup using RTT",
    "title": "SUPC wakeup using RTT",
    "content": "This example shows how to enter different low power modes and exit it using the RTT alarm. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtt/readme.html#supc-wakeup-using-rtt",
    "relUrl": "/apps/supc/supc_wakeup_rtt/readme.html#supc-wakeup-using-rtt"
  },"122": {
    "doc": "SUPC wakeup using RTT",
    "title": "Description",
    "content": "This example demonstrates entering different low power modes, retention of the general purpose backup registers (GPBR) and backup SRAM on wakeup from backup mode through an RTT alarm. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtt/readme.html#description",
    "relUrl": "/apps/supc/supc_wakeup_rtt/readme.html#description"
  },"123": {
    "doc": "SUPC wakeup using RTT",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/supc/supc_wakeup_rtt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/supc/supc_wakeup_rtt/readme.html#downloading-and-building-the-application"
  },"124": {
    "doc": "SUPC wakeup using RTT",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/supc/supc_wakeup_rtt/readme.html#setting-up-the-hardware"
  },"125": {
    "doc": "SUPC wakeup using RTT",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | On board LED starts blinking | See the following message in the console . | Select the option to enter the required Low power mode (LED is turned off when device enters a low power mode) | When the device wakes up on RTT alarm, the LED starts blinking and the console displays the following message based on the entered low power mode . | Waking up from sleep Mode . | Waking up from wait Mode . | Waking up from backup Mode . | . | . Following table lists the name of LED used on the target board: . | Board | LED | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtt/readme.html#running-the-application",
    "relUrl": "/apps/supc/supc_wakeup_rtt/readme.html#running-the-application"
  },"126": {
    "doc": "SUPC wakeup using RTT",
    "title": "SUPC wakeup using RTT",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_rtt/readme.html",
    "relUrl": "/apps/supc/supc_wakeup_rtt/readme.html"
  },"127": {
    "doc": "SUPC wakeup using WKUP pin",
    "title": "SUPC wakeup using WKUP pin",
    "content": "his example shows how to enter different low power modes and exit it using WKUP pin. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_wkup/readme.html#supc-wakeup-using-wkup-pin",
    "relUrl": "/apps/supc/supc_wakeup_wkup/readme.html#supc-wakeup-using-wkup-pin"
  },"128": {
    "doc": "SUPC wakeup using WKUP pin",
    "title": "Description",
    "content": "This example demonstrates how to use the wakeup pin to wake up the device from low power modes. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_wkup/readme.html#description",
    "relUrl": "/apps/supc/supc_wakeup_wkup/readme.html#description"
  },"129": {
    "doc": "SUPC wakeup using WKUP pin",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/supc/supc_wakeup_wkup/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_wkup/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/supc/supc_wakeup_wkup/readme.html#downloading-and-building-the-application"
  },"130": {
    "doc": "SUPC wakeup using WKUP pin",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_wkup/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/supc/supc_wakeup_wkup/readme.html#setting-up-the-hardware"
  },"131": {
    "doc": "SUPC wakeup using WKUP pin",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | On board LED starts blinking | See the following message in the console . | Select the option to enter the required Low power mode (LED is turned off when device enters a low power mode) | Press the switch to exit from low power mode | LED starts blinking and the console displays the following message based on the entered low power mode . | . Following table lists the name of LED and switch used on the target board: . | Board | LED | Switch | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | SW0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_wkup/readme.html#running-the-application",
    "relUrl": "/apps/supc/supc_wakeup_wkup/readme.html#running-the-application"
  },"132": {
    "doc": "SUPC wakeup using WKUP pin",
    "title": "SUPC wakeup using WKUP pin",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/supc/supc_wakeup_wkup/readme.html",
    "relUrl": "/apps/supc/supc_wakeup_wkup/readme.html"
  },"133": {
    "doc": "Systick periodic interrupt",
    "title": "Systick periodic interrupt",
    "content": "This example shows how to use the SysTick to generate periodic interrupts. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/systick/systick_periodic_timeout/readme.html#systick-periodic-interrupt",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#systick-periodic-interrupt"
  },"134": {
    "doc": "Systick periodic interrupt",
    "title": "Description",
    "content": "This example application configures the SysTick Peripheral Library to generate periodic ticks. The application registers a periodic timeout callback. It toggles an LED every time the callback is triggered. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/systick/systick_periodic_timeout/readme.html#description",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#description"
  },"135": {
    "doc": "Systick periodic interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/systick/systick_periodic_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/systick/systick_periodic_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#downloading-and-building-the-application"
  },"136": {
    "doc": "Systick periodic interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/systick/systick_periodic_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#setting-up-the-hardware"
  },"137": {
    "doc": "Systick periodic interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | The LED blinks continuously | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | SW0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/systick/systick_periodic_timeout/readme.html#running-the-application",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#running-the-application"
  },"138": {
    "doc": "Systick periodic interrupt",
    "title": "Systick periodic interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/systick/systick_periodic_timeout/readme.html",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html"
  },"139": {
    "doc": "TC capture mode",
    "title": "TC capture mode",
    "content": "This example shows how to use the TC module in capture mode to measure duty cycle and frequency of an external input. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_capture_mode/readme.html#tc-capture-mode",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#tc-capture-mode"
  },"140": {
    "doc": "TC capture mode",
    "title": "Description",
    "content": "The TC channel is configured in capture mode to measure duty cycle and frequency of the PWM signal. The PWM signal is generated using another TC channel which is configured in compare mode. Output of the compare TC channel is connected to input of the capture TC channel. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_capture_mode/readme.html#description",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#description"
  },"141": {
    "doc": "TC capture mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tc/tc_capture_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_capture_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#downloading-and-building-the-application"
  },"142": {
    "doc": "TC capture mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | TC0_CH0 generates the PWM waveform on pin PA00 | TC0_CH1 is configured in capture mode with the input signal connected to pin PA23 | Use a jumper wire to connect “Pin 8 of EXT1 (TC0_TIOA1)” to “Pin 7 of EXT1 (TC0_TIOA0)” | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_capture_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#setting-up-the-hardware"
  },"143": {
    "doc": "TC capture mode",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Console displays the frequency and duty cycle of the input signal | Frequency is constant (2499 Hz) and duty cycle changes by 1% | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_capture_mode/readme.html#running-the-application",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#running-the-application"
  },"144": {
    "doc": "TC capture mode",
    "title": "TC capture mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_capture_mode/readme.html",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html"
  },"145": {
    "doc": "TC compare mode",
    "title": "TC compare mode",
    "content": "This example shows how to use the TC module in compare mode to generate an active low, active high, and toggle output on compare match. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_compare_mode/readme.html#tc-compare-mode",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#tc-compare-mode"
  },"146": {
    "doc": "TC compare mode",
    "title": "Description",
    "content": "Three TC channels are configured in compare mode. Each channel generates different output waveform depending upon configured action on compare match and period match. Active low output: Output is set high on compare 1 match and is set low on compare 0 match. Active high output: Output is set low on compare 1 match and is set high on compare 0 match. Toggle output: Output toggles on compare 0 match. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_compare_mode/readme.html#description",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#description"
  },"147": {
    "doc": "TC compare mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tc/tc_compare_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_compare_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#downloading-and-building-the-application"
  },"148": {
    "doc": "TC compare mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_compare_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#setting-up-the-hardware"
  },"149": {
    "doc": "TC compare mode",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe generated waveforms on the oscilloscope | . SAM G55 Xplained Pro Evaluation Kit . | Timer Channel | Pin | Observable characteristic of the waveform | . | TC0_TIOA0 | PA00(Pin 7 of EXT1) | Toggle output with 50Hz frequency | . | TC0_TIOA1 | PA23(Pin 8 of EXT1) | Active low output with 100 Hz frequency | . | TC0_TIOB1 | PA16 (Pin 3 of I2C header) | active high output with 100 Hz frequency | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_compare_mode/readme.html#running-the-application",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#running-the-application"
  },"150": {
    "doc": "TC compare mode",
    "title": "TC compare mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_compare_mode/readme.html",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html"
  },"151": {
    "doc": "TC timer mode",
    "title": "TC timer mode",
    "content": "This example shows how to use the TC module in timer mode to generate periodic interrupt. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_timer_mode/readme.html#tc-timer-mode",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#tc-timer-mode"
  },"152": {
    "doc": "TC timer mode",
    "title": "Description",
    "content": "TC channel is configured in timer mode and generates periodic interrupt. LED is toggled in the interrupt handler to indicate periodic callback. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_timer_mode/readme.html#description",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#description"
  },"153": {
    "doc": "TC timer mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tc/tc_timer_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_timer_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#downloading-and-building-the-application"
  },"154": {
    "doc": "TC timer mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_timer_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#setting-up-the-hardware"
  },"155": {
    "doc": "TC timer mode",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe that the LED blinks once every second | . Following table provides the LED name: . | Board | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_timer_mode/readme.html#running-the-application",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#running-the-application"
  },"156": {
    "doc": "TC timer mode",
    "title": "TC timer mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/tc/tc_timer_mode/readme.html",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html"
  },"157": {
    "doc": "WDT timeout",
    "title": "WDT timeout",
    "content": "This example shows how to generate a Watchdog timer reset by emulating a deadlock. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/wdt/wdt_timeout/readme.html#wdt-timeout",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#wdt-timeout"
  },"158": {
    "doc": "WDT timeout",
    "title": "Description",
    "content": "This example application shows how the WDT peripheral library resets the watchdog timer by not feeding the watchdog on switch press. The application sets up the watchdog to reset the device. The application also sets up the timer to blink an LED to emulate a process. A user switch press forces the device to wait in an infinite loop to emulate a deadlock. As a result a device reset is triggered as the watchdog counter overflows the bounded value. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/wdt/wdt_timeout/readme.html#description",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#description"
  },"159": {
    "doc": "WDT timeout",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/wdt/wdt_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application"
  },"160": {
    "doc": "WDT timeout",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware"
  },"161": {
    "doc": "WDT timeout",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | LED should be blinking and the console displays the following message . | Press the switch to put the system in a deadlock | LED should stop blinking and the console should print the following message . | WDT will reset the device in four seconds and the demonstration should restart | . Refer the table below for details of switch and LED: . | Board | Switch Name | LED Name | . | SAM G55 Xplained Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/wdt/wdt_timeout/readme.html#running-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#running-the-application"
  },"162": {
    "doc": "WDT timeout",
    "title": "WDT timeout",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/wdt/wdt_timeout/readme.html",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html"
  },"163": {
    "doc": "ADC Polling",
    "title": "ADC Polling",
    "content": "This example demonstrates how to sample an analog input in polled mode and send the converted data to console. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_polled_mode/readme.html#adc-polling",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#adc-polling"
  },"164": {
    "doc": "ADC Polling",
    "title": "Description",
    "content": "In this example, Analog input voltage in the range of 0 V to 3.3 V is fed to the ADC and converted value is displayed on the console. The ADC conversion is triggered by software and result is polled using status API. ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_polled_mode/readme.html#description",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#description"
  },"165": {
    "doc": "ADC Polling",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/adc/adc_polled_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_g55_xpro.X | MPLABX project for SAM G55 Xplained Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_polled_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#downloading-and-building-the-application"
  },"166": {
    "doc": "ADC Polling",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_g55_xpro.X | SAM G55 Xplained Pro Evaluation Kit | . |   |   | . Setting up SAM G55 Xplained Pro Evaluation Kit . | AD0 pin is used for analog input | Use a jumper wire to connect Pin 3 of EXT1 (AD0 is mapped to Port Pin PA17) to 3.3 V or GND | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_polled_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#setting-up-the-hardware"
  },"167": {
    "doc": "ADC Polling",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | console displays the ADC Count and the ADC Input Voltage | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_polled_mode/readme.html#running-the-application",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#running-the-application"
  },"168": {
    "doc": "ADC Polling",
    "title": "ADC Polling",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/apps/adc/adc_polled_mode/readme.html",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html"
  },"169": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/csp_apps_sam_g55/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"170": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for SAM G55 family  v3.0.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLABx applications | . | SAM G55 Xplained Pro Evaluation Kit | 28 | . New Features . New features added in this release are as follows: . | Applications migrated from csp repository to this new application repository for SAM G55 development boards | . Known Issues . The current known issues are as follows: . | None | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.6.0 | . | MPLAB® XC32 C/C++ Compiler v2.41 | . ",
    "url": "http://localhost:4000/csp_apps_sam_g55/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-g55-family--v300",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-g55-family--v300"
  },"171": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_sam_g55/release_notes.html",
    "relUrl": "/release_notes.html"
  },"172": {
    "doc": "Harmony 3 peripheral library application examples for SAM G55 family",
    "title": "Harmony 3 peripheral library application examples for SAM G55 family",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 peripheral library application examples for SAM G55 family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 peripheral library application examples for SAM G55 family - [Release Notes](/csp_apps_sam_g55/release_notes.html) - [MPLAB® Harmony License](/csp_apps_sam_g55/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/csp_apps_sam_g55) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). ## Contents Summary | Folder | Description | --- | --- | apps | Contains peripheral library example applications | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/csp_apps_sam_g55/) of this repository for viewing it online. | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries. | Name | Description | ---- | ----------- | [ADC Polling](/csp_apps_sam_g55/apps/adc/adc_polled_mode/readme.html) | This example demonstrates how to sample an analog input in polled mode and send the converted data to console | [ADC user sequence](/csp_apps_sam_g55/apps/adc/adc_user_sequence/readme.html) | This example demonstrates how to sample three analog inputs using the user sequencer in software trigger mode and send the converted data to the console | [Clock configuration](/csp_apps_sam_g55/apps/clock/clock_config/readme.html) | This example application shows how to configure the clock system to run the device at maximum frequency. It also outputs a prescaled clock signal on a GPIO pin for measurement and verification | [CRCCU Compute CRC32](/csp_apps_sam_g55/apps/crccu/crccu_crc32_generate/readme.html) | This example demonstrates how to use the CRCCU module to calculate 32 bit CRC value of a data block | [EFC read write](/csp_apps_sam_g55/apps/efc/flash_read_write/readme.html) | This example shows how to use EFC to erase and program the internal Flash memory | [FLEXCOM SPI EEPROM read write](/csp_apps_sam_g55/apps/flexcom/flexcom_spi_eeprom/readme.html) | This example application shows how to use the flexcom module in SPI mode | [FLEXCOM SPI blocking](/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_blocking/readme.html) | This example application demonstrates how to use the FLEXCOM SPI peripheral to transmit and receive a block of data in a blocking manner | [FLEXCOM SPI with DMA](/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_dma/readme.html) | This example application shows how to use FLEXCOM SPI PLIB with external loop back to write and then read back an array of data in DMA mode | [FLEXCOM SPI interrupt](/csp_apps_sam_g55/apps/flexcom/flexcom_spi_self_loopback_interrupt/readme.html) | This example application shows how to use FLEXCOM SPI PLIB with external loop back to write and then read back an array of data in interrupt mode | [FLEXCOM TWI (I2C) EEPROM](/csp_apps_sam_g55/apps/flexcom/flexcom_twi_eeprom/readme.html) | This example application shows how to use the flexcom module in TWI mode | [FLEXCOM USART blocking](/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_blocking/readme.html) | This example application shows how to use the flexcom module in USART mode | [FLEXCOM USART with DMA](/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_dma/readme.html) | This example application shows how to use the flexcom module in USART DMA mode | [FLEXCOM USART interrupt](/csp_apps_sam_g55/apps/flexcom/flexcom_usart_echo_interrupt/readme.html) | This example application shows how to use the flexcom module in USART mode | [FLEXCOM USART ring buffer](/csp_apps_sam_g55/apps/flexcom/flexcom_usart_ring_buffer_interrupt/readme.html) | This example application demonstrates how to use the FLEXCOM peripheral in USART ring buffer mode | [MEM2MEM memory transfer](/csp_apps_sam_g55/apps/mem2mem/mem2mem_memory_transfer/readme.html) | This application demonstrates data transfer between two memory location using MEM2MEM | [PIO interrupt](/csp_apps_sam_g55/apps/pio/pio_led_on_off_interrupt/readme.html) | This example shows how to generate GPIO interrupt on switch press and release, and indicate the switch status using the LED | [PIO polling](/csp_apps_sam_g55/apps/pio/pio_led_on_off_polling/readme.html) | This example shows how to poll the switch input, and indicate the switch status using the LED | [RSTC interrupt](/csp_apps_sam_g55/apps/rstc/led_switcher/readme.html) | This example shows how to use the RSTC peripheral to generate an interrupt instead of generating a reset, when the Reset switch is pressed on board | [RTC alarm interrupt](/csp_apps_sam_g55/apps/rtc/rtc_alarm/readme.html) | This example shows how to use the RTC to configure the time and generate the alarm | [RTT periodic interrupt](/csp_apps_sam_g55/apps/rtt/rtt_periodic_timeout/readme.html) | This example shows how to use the RTT to generate periodic interrupts | [SUPC wakeup using RTC](/csp_apps_sam_g55/apps/supc/supc_wakeup_rtc/readme.html) | This example shows how to enter different low power modes and exit it using the RTC alarm | [SUPC wakeup using RTT](/csp_apps_sam_g55/apps/supc/supc_wakeup_rtt/readme.html) | This example shows how to enter different low power modes and exit it using the RTT alarm | [SUPC wakeup using WKUP pin](/csp_apps_sam_g55/apps/supc/supc_wakeup_wkup/readme.html) | his example shows how to enter different low power modes and exit it using WKUP pin | [Systick periodic interrupt](/csp_apps_sam_g55/apps/systick/systick_periodic_timeout/readme.html) | This example shows how to use the SysTick to generate periodic interrupts | [TC capture mode](/csp_apps_sam_g55/apps/tc/tc_capture_mode/readme.html) | This example shows how to use the TC module in capture mode to measure duty cycle and frequency of an external input | [TC compare mode](/csp_apps_sam_g55/apps/tc/tc_compare_mode/readme.html) | This example shows how to use the TC module in compare mode to generate an active low, active high, and toggle output on compare match | [TC timer mode](/csp_apps_sam_g55/apps/tc/tc_timer_mode/readme.html) | This example shows how to use the TC module in timer mode to generate periodic interrupt | [WDT timeout](/csp_apps_sam_g55/apps/wdt/wdt_timeout/readme.html) | This example shows how to generate a Watchdog timer reset by emulating a deadlock | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_sam_g55/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/csp_apps_sam_g55.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_sam_g55/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/csp_apps_sam_g55.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_sam_g55/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/csp_apps_sam_g55.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_sam_g55/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/csp_apps_sam_g55.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/csp_apps_sam_g55.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/csp_apps_sam_g55.svg?style=social)]() ",
    "url": "http://localhost:4000/csp_apps_sam_g55/",
    "relUrl": "/"
  }
}
